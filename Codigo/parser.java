
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 03 18:57:38 COT 2020
//----------------------------------------------------

package com.company;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 03 18:57:38 COT 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\007\003\000\002\007\004\000\002\007\003" +
    "\000\002\007\004\000\002\007\003\000\002\007\004\000" +
    "\002\007\003\000\002\007\004\000\002\007\003\000\002" +
    "\007\004\000\002\007\003\000\002\007\004\000\002\007" +
    "\003\000\002\007\004\000\002\007\003\000\002\007\004" +
    "\000\002\007\003\000\002\007\004\000\002\010\003\000" +
    "\002\003\006\000\002\003\005\000\002\003\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\011" +
    "\011\000\002\005\005\000\002\005\003\000\002\006\005" +
    "\000\002\006\003\000\002\012\011\000\002\013\004\000" +
    "\002\014\004\000\002\014\002\000\002\022\004\000\002" +
    "\023\005\000\002\024\004\000\002\016\004\000\002\017" +
    "\005\000\002\015\004\000\002\020\004\000\002\021\005" +
    "\000\002\021\004\000\002\027\014\000\002\025\004\000" +
    "\002\026\003\000\002\030\007\000\002\033\005\000\002" +
    "\033\003\000\002\031\007\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\023\005\001\002\000\004\002\165\001" +
    "\002\000\030\004\017\012\026\013\032\017\014\024\025" +
    "\025\034\031\031\033\030\034\007\037\033\040\027\001" +
    "\002\000\004\024\164\001\002\000\004\013\146\001\002" +
    "\000\040\004\017\012\026\013\032\017\014\021\ufff0\024" +
    "\ufff0\025\034\026\ufff0\030\ufff0\031\031\033\030\034\007" +
    "\035\ufff0\037\033\040\027\001\002\000\040\004\017\012" +
    "\026\013\032\017\014\021\ufff2\024\ufff2\025\034\026\ufff2" +
    "\030\ufff2\031\031\033\030\034\007\035\ufff2\037\033\040" +
    "\027\001\002\000\040\004\017\012\026\013\032\017\014" +
    "\021\uffee\024\uffee\025\034\026\uffee\030\uffee\031\031\033" +
    "\030\034\007\035\uffee\037\033\040\027\001\002\000\052" +
    "\004\uffe9\006\uffe9\007\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\017\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9\040" +
    "\uffe9\001\002\000\004\013\135\001\002\000\040\004\017" +
    "\012\026\013\032\017\014\021\ufff4\024\ufff4\025\034\026" +
    "\ufff4\030\ufff4\031\031\033\030\034\007\035\ufff4\037\033" +
    "\040\027\001\002\000\040\004\017\012\026\013\032\017" +
    "\014\021\ufff6\024\ufff6\025\034\026\ufff6\030\ufff6\031\031" +
    "\033\030\034\007\035\ufff6\037\033\040\027\001\002\000" +
    "\052\004\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\017\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8" +
    "\040\uffe8\001\002\000\040\004\017\012\026\013\032\017" +
    "\014\021\ufffe\024\ufffe\025\034\026\ufffe\030\ufffe\031\031" +
    "\033\030\034\007\035\ufffe\037\033\040\027\001\002\000" +
    "\040\004\017\012\026\013\032\017\014\021\ufff8\024\ufff8" +
    "\025\034\026\ufff8\030\ufff8\031\031\033\030\034\007\035" +
    "\ufff8\037\033\040\027\001\002\000\042\004\uffec\006\041" +
    "\012\uffec\013\uffec\017\uffec\021\uffec\024\uffec\025\uffec\026" +
    "\uffec\030\uffec\031\uffec\033\uffec\034\uffec\035\uffec\037\uffec" +
    "\040\uffec\001\002\000\040\004\017\012\026\013\032\017" +
    "\014\021\ufffa\024\ufffa\025\034\026\ufffa\030\ufffa\031\031" +
    "\033\030\034\007\035\ufffa\037\033\040\027\001\002\000" +
    "\040\004\017\012\026\013\032\017\014\021\ufffc\024\ufffc" +
    "\025\034\026\ufffc\030\ufffc\031\031\033\030\034\007\035" +
    "\ufffc\037\033\040\027\001\002\000\004\002\uffff\001\002" +
    "\000\054\004\uffe7\006\uffe7\007\uffe7\011\124\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\017\uffe7\021\uffe7\022\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\037\uffe7\040\uffe7\001\002\000\004\013\112\001\002" +
    "\000\004\012\105\001\002\000\004\012\073\001\002\000" +
    "\010\004\017\012\026\013\032\001\002\000\004\013\060" +
    "\001\002\000\004\013\035\001\002\000\010\004\017\012" +
    "\026\013\032\001\002\000\006\014\uffe3\015\uffe3\001\002" +
    "\000\006\014\046\015\047\001\002\000\014\006\041\007" +
    "\042\014\uffe1\015\uffe1\022\uffe1\001\002\000\010\004\017" +
    "\012\045\013\032\001\002\000\010\004\017\012\026\013" +
    "\032\001\002\000\012\006\041\014\uffe2\015\uffe2\022\uffe2" +
    "\001\002\000\052\004\uffea\006\uffea\007\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\017\uffea\021\uffea\022\uffea\024\uffea" +
    "\025\uffea\026\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035" +
    "\uffea\037\uffea\040\uffea\001\002\000\052\004\uffe7\006\uffe7" +
    "\007\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\021" +
    "\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\037\uffe7\040\uffe7\001\002\000" +
    "\004\027\051\001\002\000\010\004\017\012\026\013\032" +
    "\001\002\000\006\014\uffe4\015\uffe4\001\002\000\026\004" +
    "\017\012\026\013\032\017\014\025\034\031\031\033\030" +
    "\034\007\037\033\040\027\001\002\000\006\026\uffdd\030" +
    "\055\001\002\000\004\026\054\001\002\000\040\004\uffe0" +
    "\012\uffe0\013\uffe0\017\uffe0\021\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0" +
    "\040\uffe0\001\002\000\026\004\017\012\026\013\032\017" +
    "\014\025\034\031\031\033\030\034\007\037\033\040\027" +
    "\001\002\000\004\026\uffdf\001\002\000\004\026\uffde\001" +
    "\002\000\004\012\062\001\002\000\004\014\065\001\002" +
    "\000\006\014\uffce\032\063\001\002\000\004\012\062\001" +
    "\002\000\004\014\uffcf\001\002\000\004\022\066\001\002" +
    "\000\040\004\uffd0\012\uffd0\013\uffd0\017\uffd0\021\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\037\uffd0\040\uffd0\001\002\000\006\014\070\015" +
    "\047\001\002\000\052\004\uffe6\006\uffe6\007\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\017\uffe6\021\uffe6\022\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\037\uffe6\040\uffe6\001\002\000\042\004\uffd9\012" +
    "\uffd9\013\uffd9\017\uffd9\021\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\030\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\001\002\000\040\004\uffd6\012\uffd6\013\uffd6" +
    "\017\uffd6\021\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6\031" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\040\uffd6\001\002" +
    "\000\010\011\076\022\075\032\074\001\002\000\004\012" +
    "\103\001\002\000\040\004\uffd4\012\uffd4\013\uffd4\017\uffd4" +
    "\021\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\001\002\000\004" +
    "\004\101\001\002\000\004\022\100\001\002\000\042\004" +
    "\uffd8\012\uffd8\013\uffd8\017\uffd8\021\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\001\002\000\004\022\uffd7\001\002" +
    "\000\040\004\uffd5\012\uffd5\013\uffd5\017\uffd5\021\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\037\uffd5\040\uffd5\001\002\000\006\022\075\032" +
    "\074\001\002\000\040\004\uffdc\012\uffdc\013\uffdc\017\uffdc" +
    "\021\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\037\uffdc\040\uffdc\001\002\000\004" +
    "\011\107\001\002\000\004\022\111\001\002\000\004\016" +
    "\110\001\002\000\004\022\uffda\001\002\000\040\004\uffdb" +
    "\012\uffdb\013\uffdb\017\uffdb\021\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb" +
    "\040\uffdb\001\002\000\006\012\115\016\114\001\002\000" +
    "\004\014\122\001\002\000\006\014\uffc9\032\120\001\002" +
    "\000\006\014\uffca\032\116\001\002\000\006\012\115\016" +
    "\114\001\002\000\004\014\uffcc\001\002\000\006\012\115" +
    "\016\114\001\002\000\004\014\uffcb\001\002\000\004\022" +
    "\123\001\002\000\040\004\uffcd\012\uffcd\013\uffcd\017\uffcd" +
    "\021\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\001\002\000\010" +
    "\004\017\012\026\013\032\001\002\000\006\006\041\022" +
    "\126\001\002\000\052\004\uffeb\006\uffeb\007\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\017\uffeb\021\uffeb\022\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\037\uffeb\040\uffeb\001\002\000\014\021\ufffb\024" +
    "\ufffb\026\ufffb\030\ufffb\035\ufffb\001\002\000\014\021\ufff9" +
    "\024\ufff9\026\ufff9\030\ufff9\035\ufff9\001\002\000\014\021" +
    "\ufff7\024\ufff7\026\ufff7\030\ufff7\035\ufff7\001\002\000\014" +
    "\021\ufffd\024\ufffd\026\ufffd\030\ufffd\035\ufffd\001\002\000" +
    "\014\021\ufff5\024\ufff5\026\ufff5\030\ufff5\035\ufff5\001\002" +
    "\000\014\021\ufff3\024\ufff3\026\ufff3\030\ufff3\035\ufff3\001" +
    "\002\000\010\004\017\012\026\013\032\001\002\000\006" +
    "\014\137\015\047\001\002\000\004\020\140\001\002\000" +
    "\026\004\017\012\026\013\032\017\014\025\034\031\031" +
    "\033\030\034\007\037\033\040\027\001\002\000\004\021" +
    "\142\001\002\000\040\004\uffe5\012\uffe5\013\uffe5\017\uffe5" +
    "\021\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\037\uffe5\040\uffe5\001\002\000\014" +
    "\021\uffed\024\uffed\026\uffed\030\uffed\035\uffed\001\002\000" +
    "\014\021\ufff1\024\ufff1\026\ufff1\030\ufff1\035\ufff1\001\002" +
    "\000\014\021\uffef\024\uffef\026\uffef\030\uffef\035\uffef\001" +
    "\002\000\004\031\150\001\002\000\004\036\152\001\002" +
    "\000\004\012\151\001\002\000\004\011\076\001\002\000" +
    "\010\004\017\012\026\013\032\001\002\000\004\022\154" +
    "\001\002\000\004\012\156\001\002\000\004\014\161\001" +
    "\002\000\004\010\157\001\002\000\004\014\uffd1\001\002" +
    "\000\004\014\uffd2\001\002\000\026\004\017\012\026\013" +
    "\032\017\014\025\034\031\031\033\030\034\007\037\033" +
    "\040\027\001\002\000\004\035\163\001\002\000\040\004" +
    "\uffd3\012\uffd3\013\uffd3\017\uffd3\021\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\037" +
    "\uffd3\040\uffd3\001\002\000\004\002\001\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\002\003\001\001\000\002\001\001\000" +
    "\032\003\021\004\012\007\005\010\017\011\023\012\022" +
    "\016\020\020\015\022\014\027\010\030\007\031\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\021" +
    "\004\012\007\144\010\017\011\023\012\022\016\020\020" +
    "\015\022\014\027\010\030\007\031\011\001\001\000\032" +
    "\003\021\004\012\007\143\010\017\011\023\012\022\016" +
    "\020\020\015\022\014\027\010\030\007\031\011\001\001" +
    "\000\032\003\021\004\012\007\142\010\017\011\023\012" +
    "\022\016\020\020\015\022\014\027\010\030\007\031\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\021\004\012\007\133\010\017\011\023\012\022\016\020" +
    "\020\015\022\014\027\010\030\007\031\011\001\001\000" +
    "\032\003\021\004\012\007\132\010\017\011\023\012\022" +
    "\016\020\020\015\022\014\027\010\030\007\031\011\001" +
    "\001\000\002\001\001\000\032\003\021\004\012\007\131" +
    "\010\017\011\023\012\022\016\020\020\015\022\014\027" +
    "\010\030\007\031\011\001\001\000\032\003\021\004\012" +
    "\007\130\010\017\011\023\012\022\016\020\020\015\022" +
    "\014\027\010\030\007\031\011\001\001\000\002\001\001" +
    "\000\032\003\021\004\012\007\127\010\017\011\023\012" +
    "\022\016\020\020\015\022\014\027\010\030\007\031\011" +
    "\001\001\000\032\003\021\004\012\007\126\010\017\011" +
    "\023\012\022\016\020\020\015\022\014\027\010\030\007" +
    "\031\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\103\001\001\000\006\017\070" +
    "\021\071\001\001\000\012\003\037\004\012\005\066\006" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\037\004\012\005\036\006\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\043" +
    "\001\001\000\006\003\042\004\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\037\004\012\006\047\001\001\000\002\001" +
    "\001\000\034\003\021\004\012\007\051\010\017\011\023" +
    "\012\022\013\052\016\020\020\015\022\014\027\010\030" +
    "\007\031\011\001\001\000\004\014\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\021\004\012\007" +
    "\056\010\017\011\023\012\022\016\020\020\015\022\014" +
    "\027\010\030\007\031\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\076\001\001\000\004\021\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\116\001\001\000\002" +
    "\001\001\000\004\032\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\124\004\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\037\004" +
    "\012\005\135\006\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\021\004\012\007\140\010\017\011" +
    "\023\012\022\016\020\020\015\022\014\027\010\030\007" +
    "\031\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\146\001\001\000\002\001\001\000\004\017\070\001" +
    "\001\000\004\015\076\001\001\000\010\003\037\004\012" +
    "\006\152\001\001\000\002\001\001\000\004\025\154\001" +
    "\001\000\002\001\001\000\004\026\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\021\004\012\007" +
    "\161\010\017\011\023\012\022\016\020\020\015\022\014" +
    "\027\010\030\007\031\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String errsin="";
    public void syntax_error (Symbol x){
        errsin+="\n Syntax error en pos " + (x.left+1) + "," + (x.right+1);
        throw new UnsupportedOperationException (errsin);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NN ::= str 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NN ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NN ::= str com NN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NN ::= id com NN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NA ::= escribir pi NN pd pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NA",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FF ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FF",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FF ::= id com FF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FF",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NE ::= leer pi FF pd pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // HI ::= op_incremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("HI",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // HE ::= id HI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("HE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // HA ::= para pi H hasta EA pc HE pd IS finpara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("HA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // O ::= id pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("O",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // O ::= id com O 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("O",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N ::= ent O 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // M ::= asig num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // K ::= id M pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // H ::= ent K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // U ::= asig str 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("U",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // W ::= id U pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("W",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Q ::= pal W 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Q",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // G ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // G ::= sino IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // F ::= IS G 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // D ::= si pi EL pd entonces F finsi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EA ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EA ::= E op_relacional E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EL ::= EA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EL ::= EL ol EA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // C ::= mientras pi EL pd hacer IS finmientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // T ::= pi EL pd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E op_aritmetico T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= id asig E pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // L ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IS ::= NA IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IS ::= NA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IS ::= NE IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IS ::= NE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IS ::= HA IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IS ::= HA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IS ::= Q IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IS ::= Q 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IS ::= N IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IS ::= N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IS ::= H IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IS ::= H 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IS ::= D IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IS ::= D 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IS ::= C IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IS ::= C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IS ::= L IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IS ::= L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // I ::= Programa FinPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // I ::= Programa IS FinPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

